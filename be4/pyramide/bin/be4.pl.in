#!/usr/bin/env perl
# Copyright © (2011) Institut national de l'information
#                    géographique et forestière 
# 
# Géoportail SAV <geop_services@geoportail.fr>
# 
# This software is a computer program whose purpose is to publish geographic
# data using OGC WMS and WMTS protocol.
# 
# This software is governed by the CeCILL-C license under French law and
# abiding by the rules of distribution of free software.  You can  use, 
# modify and/ or redistribute the software under the terms of the CeCILL-C
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info". 
# 
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability. 
# 
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or 
# data to be ensured and,  more generally, to use and operate it in the 
# same conditions as regards security. 
# 
# The fact that you are presently reading this means that you have had
# 
# knowledge of the CeCILL-C license and that you accept its terms.

################################################################################

=begin nd
File: be4.pl

Section: BE4 tool

Synopsis:
    (start code)
    perl be4.pl --conf=path [ --env=path ]
    # All parameters of the --env config file can be overided by --conf config file parameter
    (end code)

Tool allowing to generate a pyramid of tiled TIFF images, several resolutions, with compression (lossless or lossy) from serveral data sources, georeferenced image (ortho, scan, ...) or WMS service. Output format respects WMS/WMTS server ROK4.

This tool write scripts, to execute to obtain the pyramid.

(see be4_general.png)

2 types of generation :
    - create a new pyramid with data
    - create a pyramid from an ancestor one (update)

2 data source type :
    - images
    - WMS service

=cut

################################################################################

use warnings;
use strict;

use POSIX qw(locale_h);

use Getopt::Long;
use Pod::Usage;

use Data::Dumper;

use File::Basename;
use File::Spec;
use File::Path;
use Cwd;

use Log::Log4perl qw(:easy);

# My search module
use FindBin qw($Bin);
use lib "$Bin/../lib/perl5";

# My module
use BE4::PropertiesLoader;
use BE4::Pyramid;
use BE4::DataSourceLoader;
use BE4::Forest;

################################################################################
# Constantes
use constant TRUE  => 1;
use constant FALSE => 0;

################################################################################
# Pas de bufferisation des sorties.
$|=1;

####################################################################################################
#                                       Group: Variables                                           #
####################################################################################################

# Variable: version
my $VERSION = '@VERSION_TEXT@';

=begin nd
Variable: options

Contains be4 call options :

    version - To obtain the command's version
    help - To obtain the command's help
    usage - To obtain the command's usage
    properties - Configuration file
    environment - Environment file
=cut
my %options =
(
    "version"    => 0,
    "help"       => 0,
    "usage"      => 0,
    
    # Configuration
    "properties"  => undef, # file properties params (mandatory) !
    "environment" => undef, # file environment be4 params (optional) !
    
    # Only for maintenance !
    "test" => 0,
);

=begin nd
Variable: this

All parameters by section :

    logger - Can be null
    datasource - 
    harvesting - Deprecated, use *datasource* section instead.
    pyramid - 
    tilematrixset - Can be in *pyramid* section
    nodata - Can be in *pyramid* section
    tile - Can be in *pyramid* section
    process - 
=cut
my %this =
(
    params => {
        logger        => undef,
        datasource    => undef,
        harvesting    => undef,
        pyramid       => undef,
        tilematrixset => undef,
        nodata        => undef,
        tile          => undef,
        process       => undef,
    },
);

####################################################################################################
#                                         Group: Functions                                         #
####################################################################################################

=begin nd
Function: main

Main method.

See Also:
    <init>, <config>, <doIt>
=cut
sub main {
  printf("BE4: version [%s]\n",$VERSION);
  # message
  my $message = undef;
  
  # initialization
  ALWAYS("> Initialization");
  if (! main::init()) {
    $message = "ERROR INITIALIZATION !";
    printf STDERR "%s\n", $message;
    exit 1;
  }

  $message = "BEGIN";
  printf STDOUT "%s\n", $message;
  
  # configuration
  ALWAYS("> Configuration");
  if (! main::config()) {
    $message = "ERROR CONFIGURATION !";
    printf STDERR "%s\n", $message;
    exit 2;
  }
  
  # execution
  ALWAYS("> Execution");
  if (! main::doIt()) {
    $message = "ERROR EXECUTION !";
    printf STDERR "%s\n", $message;
    exit 3;
  }
  
  $message = "END";
  printf STDOUT "%s\n", $message;
}

=begin nd
Function: init

Checks options and initializes the default logger. Check environment file (optionnal) and properties file (mandatory).
=cut
sub init {
  
    # init Getopt
    local $ENV{POSIXLY_CORRECT} = 1;
    
    Getopt::Long::config qw(
        default
        no_autoabbrev
        no_getopt_compat
        require_order
        bundling
        no_ignorecase
        permute
    );

    # init Options
    GetOptions(
        "help|h" => sub {
            printf "See documentation here: http://www.rok4.org/data/doc/pyramide/Html/files/bin/be4-pl.html\n" ;
            exit 0;
        },
        "version|v" => sub { exit 0; },
        "usage" => sub {
            printf "See documentation here: http://www.rok4.org/data/doc/pyramide/Html/files/bin/be4-pl.html\n" ;
            exit 0;
        },
        
        "properties|conf=s" => \$options{properties},
        "environment|env=s" => \$options{environment},        
    ) or do {
        printf "Unappropriate usage\n";
        printf "See documentation here: http://www.rok4.org/data/doc/pyramide/Html/files/bin/be4-pl.html\n";
        exit -1;
    };
  
    # logger by default at runtime
    Log::Log4perl->easy_init({
        level => $WARN,
        layout => '%5p : %m (%M) %n'
    });

    # We make path absolute

    # properties : mandatory !
    if (! defined $options{properties} || $options{properties} eq "") {
        ERROR("Option 'properties' not defined !");
        return FALSE;
    }
    my $fproperties = File::Spec->rel2abs($options{properties});
    $options{properties} = $fproperties;
    
    # env : optional !
    if (defined $options{environment} && $options{environment} ne "") {
        my $fenvironment = File::Spec->rel2abs($options{environment});
        $options{environment} = $fenvironment;
    }
    
    return TRUE;
}

=begin nd
Function: config

Loads environment and properties files and merge parameters. Those in the properties file have priority over those in the environment file.

See Also:
    <checkParams>
=cut
sub config {

    ###################
    ALWAYS(">>> Load Properties ...");
    
    my $fprop = $options{properties};
    my $objProp = BE4::PropertiesLoader->new($fprop);
    
    if (! defined $objProp) {
        ERROR("Can not load specific properties !");
        return FALSE;
    }
    
    my $refProp = $objProp->getAllProperties();
    
    if (! defined $refProp) {
        ERROR("All parameters properties are empty !");
        return FALSE;
    }

    ###################

    my $hashref;

    ###################
    ALWAYS(">>> Treat optionnal environment ...");

    my $fenv = undef;
    $fenv = $options{environment} if (defined $options{environment} && $options{environment} ne "");

    if (defined $fenv) {
        my $objEnv = BE4::PropertiesLoader->new($fenv);

        if (! defined $objEnv) {
            ERROR("Can not load environment properties !");
            return FALSE;
        }

        my $refEnv = $objEnv->getAllProperties();

        if (! defined $refEnv) {
            ERROR("All parameters environment are empty !");
            return FALSE;
        }
        
        foreach (keys %{$this{params}}) {
            my $href = { map %$_, grep ref $_ eq 'HASH', ($refEnv->{$_}, $refProp->{$_}) };
            $hashref->{$_} = $href;
        }
    } else {
        foreach (keys %{$this{params}}) {
            my $href = { map %$_, grep ref $_ eq 'HASH', ($refProp->{$_}) };
            $hashref->{$_} = $href;
        }
    }

    ###################

    if (! defined $hashref) {
        ERROR("Can not merge all parameters of properties !");
        return FALSE;
    }
  
    # save params properties
    $this{params} = $hashref;
    
    if (! main::checkParams() ) {
        ERROR("Can not check parameters of properties !");
        return FALSE;
    }
    
    return TRUE;
}

=begin nd
Function: checkParams

Checks presence of mandatory sections in parameters.
    - pyramid
    - process
    - datasource
    
Sections tile, tms and nodata are inserted into the pyramid section.

Logger parameters are used to initialize logger (Log::Log4perl library).

=cut
sub checkParams {
    
    ###################
    # check parameters
    
    my $pyramid     = $this{params}->{pyramid};       # 
    my $logger      = $this{params}->{logger};        # 
    my $tms         = $this{params}->{tilematrixset}; #  
    my $tile        = $this{params}->{tile};          # 
    my $nodata      = $this{params}->{nodata};        # 
    my $datasource  = $this{params}->{datasource};    #
    my $harvesting  = $this{params}->{harvesting};    #
    my $process     = $this{params}->{process};       # 
    
    # pyramid
    if (! defined $pyramid) {
        ERROR("Parameters Pyramid can not be null !");
        return FALSE;
    }
    
    # datasource
    if (! defined $datasource) {
        ERROR("Parameters Datasource can not be null !");
        return FALSE;
    }
    
    # process
    if (! defined $process) {
        ERROR("Parameters Process can not be null !");
        return FALSE;
    }
    
    # logger
    if (defined $logger) {
    
        my @args;
        
        my $layout= '%5p : %m (%M) %n';
        my $level = $logger->{log_level};
        my $out   = sprintf (">>%s", File::Spec->catfile($logger->{log_path}, $logger->{log_file}))
            if (! main::IsEmpty($logger->{log_path}) && ! main::IsEmpty($logger->{log_file}));
        
        $out   = "STDOUT" if (! defined $out);
        $level = "WARN"   if (! defined $level);
        
        if ($level =~ /(ALL|DEBUG)/) {
            $layout = '%5p : %m (%M) %n';
        }
        
        # add the param logger by default (user settings !)
        push @args, {
            file   => $out,
            level  => $level,
            layout => $layout,
        };
        
        if ($out ne "STDOUT") {
            # add the param logger to the STDOUT
            push @args, {
                file   => "STDOUT",
                level  => $level,
                layout => $layout,
            },
        }
        Log::Log4perl->easy_init(@args); 
    }
    
    # 
    $pyramid = { map %$_, grep ref $_ eq 'HASH', ($tms,         $pyramid) };
    $pyramid = { map %$_, grep ref $_ eq 'HASH', ($tile,        $pyramid) };
    $pyramid = { map %$_, grep ref $_ eq 'HASH', ($nodata,      $pyramid) };
    
    # save
    $this{params}->{pyramid} = $pyramid;
    $this{params}->{logger}  = $logger;
    
    return TRUE;
}

=begin nd
Function: doIt

Steps in order, using parameters :
    - create the Pyramid object : <BE4::Pyramid::new>
    - load data sources : <BE4::DataSourceLoader::new>
    - update levels for this Pyramid object : <BE4::Pyramid::updateLevels>
    - create the Forest object : <BE4::Forest::new>
    - write (initialization) the pyramid's directories tree and its list : <BE4::Pyramid::writeCachePyramid> and <BE4::Pyramid::writeListPyramid>
    - write the pyramid's descriptor : <BE4::Pyramid::writeConfPyramid>
    - compute trees (write scripts) : <BE4::Forest::computeGraphs>
=cut
sub doIt {

    #######################
    # link to parameters
    my $params = $this{params};
    
    #######################
    # objects to implemented
    
    my $objPyramid = undef;
    my $objDSL = undef;
    my $objForest = undef;
    
    #######################
    # create a pyramid
    
    ALWAYS(">>> Load a Pyramid ...");
    
    $objPyramid = BE4::Pyramid->new( $params->{pyramid}, $params->{process}->{path_temp} );
    if (! defined $objPyramid) {
        ERROR("Can not load Pyramid !");
        return FALSE;
    }
    
    #######################
    # load data source
    
    ALWAYS(">>> Load Data Source ...");

    $objDSL = BE4::DataSourceLoader->new($params->{datasource},$params->{harvesting},$params->{pyramid}->{pyr_level_bottom});
    if (! defined $objDSL) {
        ERROR("Cannot load data sources !");
        return FALSE;
    }
    
    #######################
    # update levels
    
    ALWAYS(">>> Determine levels ...");
    
    if (! $objPyramid->updateLevels($objDSL,$params->{pyramid}->{pyr_level_top})) {
        ERROR("Can not update levels !");
        return FALSE;
    }

    DEBUG(sprintf "DATA SOURCE LOADER (debug export) = %s", $objDSL->exportForDebug);
    
    # we cannot write the pyramid descriptor and cache now. We need data's limits, calculated by graphs.
  
    #######################
    # create forest : load graphs
    
    ALWAYS(">>> Load Forest ...");
  
    $objForest = BE4::Forest->new(
        $objPyramid,
        $objDSL,
        $params->{process}
    );
  
    if (! defined $objForest) {
        ERROR("Can not load the forest !");
        return FALSE;
    }

    #######################
    # write the pyramid list
    
    ALWAYS(">>> Write the pyramid's list ...");

    if (! $objPyramid->writeListPyramid($objForest, $params->{process}->{path_temp})) {
        ERROR("Can not write Pyramid list !");
        return FALSE;
    }
    
    #######################
    # write the pyramid cache
    
    ALWAYS(">>> Write the pyramid's cache ...");

    if (! $objPyramid->writeCachePyramid) {
        ERROR("Can not write Pyramid Cache !");
        return FALSE;
    }
    
    #######################
    # write the pyramid descriptor

    ALWAYS(">>> Write the pyramid's descriptor ...");

    if (! $objPyramid->writeConfPyramid) {
        ERROR("Can not write Pyramid file !");
        return FALSE;
    }
  
    DEBUG(sprintf "PYRAMID (debug export) = %s", $objPyramid->exportForDebug);
  
    #######################
    # compute graphs
    
    ALWAYS(">>> Compute forest ...");
    
    if (! $objForest->computeGraphs()) {
        ERROR("Can not compute forest !");
        return FALSE;
    }
    
    DEBUG(sprintf "FOREST (debug export) = %s", $objForest->exportForDebug);
    
    return TRUE;
}

=begin nd
Function: IsEmpty

Precises if an hash or a reference can be considered as empty.

Parameters (list):
    value - var - Variable to test
=cut
sub IsEmpty {

  my $value = shift;
  
  return FALSE if (ref($value) eq "HASH");
  return TRUE  if (! defined $value);
  return TRUE  if ($value eq "");
  return FALSE;
}

################################################################################

BEGIN {}
INIT {}

main;
exit 0;

END {}

################################################################################

1;
__END__

=begin nd
Section: Details

Group: Command's options

    --help - Display the link to the technic documentation.

    --usage - Display the link to the technic documentation.

    --version - Display the tool version.

    --conf=path - Path to configuration file of the pyramid. This option is mandatory.

    --env=path - Path to environment file of all pyramid, it's the common configuration. This option is optional. By default, the file configuration of install is used.

Group: Write a configuration file

A file configuration can be composed of sections and parameters following :

    (start code)
    [ section ]
    parameter = value
    ;comments
    (end code)

In a data source configuration, sections are level ID, from which the data source is used.

Group: BE4 global configuration file

Properties by section.

Topic: logger

    log_path - Directory path where to write log_file
    
    log_file - Path to print too output (in addition to STDOUT). Log file path : *log_path/log_file*

    log_level - Define importance level from which we print messages. From less to more important : DEBUG - INFO - WARN - ERROR - ALWAYS (WARN by default).

Example:
    (start code)
    [ logger ]
    log_path = /var/log
    log_file = be4_log_yyyy-mm-dd.txt
    log_level = INFO
    (end code)

Topic: datasource

    filepath_conf - Complete file path to configuration file for data sources (*/home/ign/SOURCE/sources.txt*)

Example:
    (start code)
    [ datasource ]
    filepath_conf = /home/IGN/sources.txt
    (end code)

Topic: pyramid

For more informations about properties, see <BE4::Pyramid>.

    pyr_name_new - Name of the new pyramid, used to name the descriptor, the pyramid's list, the data directory and the temporary directory.
    pyr_data_path - Directory path, where to write the cache. Mandatory.
    pyr_desc_path - Directory path, where to write the descriptor. Mandatory.

    pyr_name_old - If existing pyramid, its name. If this parameter is present, generation is an update.
    pyr_data_path_old - If existing pyramid, directory path where to find the cache. Default : pyr_data_path value.
    pyr_desc_path_old - If existing pyramid, directory path where to find the descriptor. Default : pyr_desc_path value.
    update_mode - Possible values :
        slink, hlink, copy : existing pyramid, the way the new cache will reference the ancestor's cache.
        inject : no new pyramid. The old one is updated. CAUTION : old pyramid is irreversibly modified
        Default : slink.

    compression - Possible values : raw, jpg, zip, lzw, png, pkb. PNG compression is not an official compression for tiff format (just readable by rok4). Default : raw.

    compressionoption - Possible values : none and crop. Crop option have to be used with compression 'jpg'. Blocks which contain a white pixel are filled with white, to keep a pure white, in spite of compression. Default : none.

    color - The color is a string and contain on value per sample, in decimal format, seperated by comma. For 8 bits unsigned integer, value must be between 0 and 255. For 32 bits float, an integer is expected too, but can be negative.
    Example : "255,255,255" (white) for images whithout alpha sample, "-99999" for a DTM.

    image_width, image_height - Number a tile in the cache image, widthwise and heightwise. 16 * 16 for example. Mandatory.

    bitspersample - Possible values : 8, 32. Have to be the same as source. Mandatory.

    sampleformat - Possible values : uint, float. Have to be the same as source. Mandatory.

    samplesperpixel - Possible values : 1, 3, 4. Have to be the same as source. Mandatory.

    photometric - Possible values : gray, rgb. Have to be consistent with the samples per pixel. 1 -> gray and 3,4 -> rgb. Default : rgb.

    interpolation - Possible values : nn, linear, bicubic, lanczos. Interpolation used to resampled images (in mergeNtiff). Nodata pixel are excluded by the interpolation if we use masks. Default : bicubic.

    dir_depth - Image's depth from the level directory. depth = 2 => /.../LevelID/SUB1/SUB2/IMG.tif. Mandatory.

    dir_image, dir_nodata, dir_mask - Names of subdirectories in the pyramid, in *pyr_data_path/pyr_name/* Default : IMAGE, NODATA, MASK.

    tms_name - TMS file name, with extension *.tms*. Mandatory.

    tms_path - Directory, where to find the TMS file. Mandatory.

    pyr_level_top - Optionnal. If we don't want pyramid to be generated to the TMS top level, we can force the top level. It have to be consistent with base levels in the data sources configuration file.

    export_masks - An option is used to precise if we want to write masks in the final pyramid. So we can use masks but not export them (they may be useless for a pyramid which wont be never updated). Only values "true" and "TRUE" lead to masks' export. Optionnal, FALSE by default.

Examples:
    (start code)
    [ pyramid ]
    pyr_data_path = /home/IGN/PYRAMIDS
    pyr_desc_path = /home/IGN/DESCRIPTOR
    pyr_name_new = ORTHO
    pyr_level_bottom = 19
    
    tms_name = LAMB93_10cm.tms
    tms_path = /home/IGN/TMS

    dir_depth = 2
    image_width = 16
    image_height = 16

    dir_image = IMAGE
    dir_nodata = NODATA
    dir_mask = MASK
    export_masks = TRUE
    
    compression         = png
    bitspersample       = 8
    sampleformat        = uint
    photometric         = rgb
    samplesperpixel     = 3
    interpolation       = bicubic

    ; red as nodata color
    color               = 255,0,0 
    (end code)

Topic: process

For more informations about properties, see <BE4::Forest> and <BE4::Commands>.

    job_number - Level of parallelization for scripts. Distribution details are different according to the kind of graph (see <BE4::QTree> and <BE4::Graph>). Mandatory.

    path_temp - Temporary directory path proper to each script : temporary files are written in *path_temp/pyr_name_new/SCRIPT_ID*.

    path_temp_common - Common temporary directory path : temporary files which have to be shared between several scripts are written in *path_temp_common/pyr_name_new/COMMON*. Mandatory.

    path_shell - Directory path, to write scripts in. Scripts are named in like manner for all generation. That's why the path_shell must be specific to the generation (contains the name of the pyramid for example). Mandatory.

    use_masks - To avoid some problems (data removing), we can use mask during generation, to know precisely where is data, in images. This behaviour make process longer, that's why default behaviour is without mask. Only values "true" and "TRUE" lead to masks' use. Optionnal, FALSE by default.

Example:
    (start code)
    [ process ]
    path_temp = /tmp/PRIVATE/
    path_temp_common = /tmp/COMMON/
    path_shell  = /home/IGN/SCRIPT/ORTHO
    job_number = 16
    (end code)

Group: Paths in brief

    - Descriptor file : *pyr_desc_path/pyr_name.pyr*
    - List file: *pyr_desc_path/pyr_name.list*
    - Cache directory: *pyr_data_path/pyr_name/*
    - TMS file: *tms_path/tms_name*
    - Scripts: *path_shell/SCRIPT_X.sh*
    - Temporary directory: *path_temp/pyr_name_new/SCRIPT_X*
    - Common temporary directory: *path_temp_common/pyr_name_new/COMMON*

Group: DataSource configuration

For more informations about datasource properties loading, see <BE4::DataSourceLoader> and <BE4::DataSource>.

Topic: For all types

    srs - The images' or the extent's SRS. Mandatory.

Topic: For an image source

For more informations about properties, see <BE4::ImageSource>.
    
    path_image - Directory path, where to find georeferenced images to use to generate the cache. Subdirectory are authorized and browsed.
    preprocess_command  - string - command to call to preprocess source images (optionnal)
    preprocess_opt_beg  - string - command arguments placed between the command and the source file (optionnal even with a command specified)
    preprocess_opt_mid  - string - command arguments placed between the source file and the target file (optionnal even with a command specified)
    preprocess_opt_end  - string - command arguments placed after the target file (optionnal even with a command specified)
    preprocess_tmp_dir  - string - directory in which preprocessed images will be created. Mandatory if a preprocessing command is given.

Topic: For a WMS source

For more informations about properties, see <BE4::Harvesting>.
    
    wms_layer - Resource to harvest.

    wms_url - URL of rok4.

    wms_version - 1.3.0

    wms_request - Kind of request : "getMap".

    wms_format - Format of the harvested image.

    wms_style - Optionnal.

    wms_transparent - TRUE or FALSE. Optionnal.

    max_width, max_height - If not defined, images will be harvested all-in-one. If defined, requested image size will have to be a multiple of this size.

    min_size - Used to remove too small harvested images (filled with nodata), in byte. Optionnal.

    wms_bgcolor - Format : 0xFFFFFF. Optionnal.

    extent - Area where we have to harvest. It can be a bbox "xmin,ymin,xmax,ymax" or the path of a file which contains a geometry in WKT format. Mandatory if no georeferenced image to define extent (path_image is not present).
    
    list - Pathy to a file, containing a list of images' indices (I,J) to harvest. It could replace an extent.

Examples:
    (start code)
    
    [ 14 ]
    ; We use a WMS service and we have to know extent to harvest. Georeferenced images are used to define this extent.
    path_image          = /home/IGN/DATA/ORTHO_LAMB93
    srs                 = IGNF:LAMB93

    wms_layer   = WMS_ORTHO
    wms_url     = http://localhost/rok4
    wms_version = 1.3.0
    wms_request = getMap
    wms_format  = image/tiff

    [ 17 ]
    ; No georeferenced images, we use a WMS service and we have to know extent to harvest. Extent's SRS is supplied too.
    srs = IGNF:WGS84G
    extent = /home/IGN/Polygon.txt

    wms_layer   = ORTHO
    wms_url     = http://localhost/rok4
    wms_version = 1.3.0
    wms_request = getMap
    wms_format  = image/png
    wms_style  = line
    wms_bgcolor  = 0x80BBDA
    wms_transparent  = true
    max_width = 2048
    max_height = 1024

    [ 18 ]
    ; Georeferenced images
    srs = EPSG:3857
    path_image = /home/IGN/DATA/ORTHO_PM
    (end code)
    
    [ 19 ]
    ; Georeferenced images with preprocessing command
    srs = EPSG:3857
    path_image = /home/IGN/DATA/ORTHO_PM
    preprocess_command = composite
    preprocess_opt_beg = -watermark 50x50 -gravity center
    preprocess_opt_mid = grayscale_watermark_img.ext
    (end code)

Group: Old way to provide ONE datasource

No specific configuration file for data sources. All parameters regarding THE data source, *with georeferenced images*, are in the BE4 configuration file.

    - We have to precise the level from which the one data source is used. *pyr_level_bottom*, in the *pyramid* section.
    - Image source parameters (*path_image* and *srs*) are in the *datasource* section (see <For an image source> for meanings).
    - Possibly WMS service parameters (*wms_layer*, ...) are in a *harvesting* section (see <For a WMS source> for options and meanings).

Example:
    (start code)
    
    ; Georeferenced images + WMS
    [ datasource ]
    path_image          = /home/IGN/DATA/ORTHO_LAMB93
    srs                 = IGNF:LAMB93

    [ harvesting ]
    wms_layer   = WMS_ORTHO
    wms_url     = http://localhost/rok4
    wms_version = 1.3.0
    wms_request = getMap
    wms_format  = image/tiff
    

    [ pyramid ]
    pyr_data_path = /home/IGN/PYRAMIDS
    pyr_desc_path = /home/IGN/DESCRIPTOR
    pyr_name_new = ORTHO
    pyr_level_bottom = 19

    tms_name = LAMB93_10cm.tms
    tms_path = /home/IGN/TMS

    dir_depth = 2
    image_width = 16
    image_height = 16

    dir_image = IMAGE
    dir_nodata = NODATA
    dir_mask = MASK

    compression         = png
    bitspersample       = 8
    sampleformat        = uint
    photometric         = rgb
    samplesperpixel     = 3
    interpolation       = bicubic

    ; red as nodata color
    color               = 255,0,0
    (end code)

Group: Externals tools

Scripts' execution needs following tools:

    - pngcheck
    - wget
    
=cut
